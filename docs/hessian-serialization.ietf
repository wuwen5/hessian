<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="std" ipr="full3978" docName="hessian.txt">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>

  <front>
    <title>Hessian 2.0 Serialization Protocol</title>
    <author initials="S." surname="Ferguson" fullname="Scott Ferguson">
      <organization>Caucho Technology Inc.</organization>
      <address>
        <postal>
          <street>P.O. Box 9001</street>
          <city>La Jolla</city>
          <region>CA</region>
          <code>92038</code>
          <country>USA</country>
        </postal>
        <email>ferg@caucho.com</email>
      </address>
    </author>
    <author initials="E." surname="Ong" fullname="Emil Ong">
      <organization>Caucho Technology Inc.</organization>
      <address>
        <postal>
          <street>P.O. Box 9001</street>
          <city>La Jolla</city>
          <region>CA</region>
          <code>92038</code>
          <country>USA</country>
        </postal>
        <email>emil@caucho.com</email>
      </address>
    </author>
    <date month="August" year="2007" />
  </front>
  
  <middle>
    <section title="Introduction">
      <t>
        Hessian is a dynamically-typed, binary serialization and Web
Services protocol designed for object-oriented transmission.
      </t>
    </section>

    <section title="Design Goals">
      <t>
        Hessian is dynamically-typed, compact, and portable across languages.
      </t>
      <t>
      The Hessian protocol has the following design goals:
      </t>
      <list style="symbols">
        <t>
          It must self-describe the serialized types, i.e. not require
external schema or interface definitions.
        </t>
        <t>It must be language-independent, including supporting
scripting languages.</t>
        <t>It must be readable or writable in a single pass.</t>
        <t>It must be as compact as possible.</t>
        <t>
          It must be simple so it can be effectively tested and implemented.
        </t>
        <t>It must be as fast as possible.</t>
        <t>It must support Unicode strings.</t>
        <t>
          It must support 8-bit binary data without escaping or using 
          attachments.
        </t>
        <t>
          It must support encryption, compression, signature, and
          transaction context envelopes.
        </t>
      </list>
    </section>

    <section title="Hessian Grammar">
      <figure anchor="serialization_grammar">
        <preamble>Serialization Grammar</preamble>
        <artwork>
           # starting production
top        ::= value

           # 8-bit binary data split into 64k chunks
binary     ::= x41 b1 b0 &lt;binary-data> binary # non-final chunk
           ::= 'B' b1 b0 &lt;binary-data>        # final chunk
           ::= [x20-x2f] &lt;binary-data>        # binary data of 
                                                 #  length 0-15
           ::= [x34-x37] &lt;binary-data>        # binary data of 
                                                 #  length 0-1023

           # boolean true/false
boolean    ::= 'T'
           ::= 'F'

           # definition for an object (compact map)
class-def  ::= 'C' string int string*

           # time in UTC encoded as 64-bit long milliseconds since 
           #  epoch
date       ::= x4a b7 b6 b5 b4 b3 b2 b1 b0
           ::= x4b b3 b2 b1 b0       # minutes since epoch

           # 64-bit IEEE double
double     ::= 'D' b7 b6 b5 b4 b3 b2 b1 b0
           ::= x5b                   # 0.0
           ::= x5c                   # 1.0
           ::= x5d b0                # byte cast to double 
                                     #  (-128.0 to 127.0)
           ::= x5e b1 b0             # short cast to double
           ::= x5f b3 b2 b1 b0       # 32-bit mills

           # 32-bit signed integer
int        ::= 'I' b3 b2 b1 b0
           ::= [x80-xbf]             # -x10 to x3f
           ::= [xc0-xcf] b0          # -x800 to x7ff
           ::= [xd0-xd7] b1 b0       # -x40000 to x3ffff

           # list/vector
list       ::= x55 type value* 'Z'   # variable-length list
	   ::= 'V' type int value*   # fixed-length list
           ::= x57 value* 'Z'        # variable-length untyped list
           ::= x58 int value*        # fixed-length untyped list
	   ::= [x70-77] type value*  # fixed-length typed list
	   ::= [x78-7f] value*       # fixed-length untyped list

           # 64-bit signed long integer
long       ::= 'L' b7 b6 b5 b4 b3 b2 b1 b0
           ::= [xd8-xef]             # -x08 to x0f
           ::= [xf0-xff] b0          # -x800 to x7ff
           ::= [x38-x3f] b1 b0       # -x40000 to x3ffff
           ::= x59 b3 b2 b1 b0       # 32-bit integer cast to long

           # map/object
map        ::= 'M' type (value value)* 'Z'  # key, value map pairs
	   ::= 'H' (value value)* 'Z'       # untyped key, value

           # null value
null       ::= 'N'

           # Object instance
object     ::= 'O' int value*
	   ::= [x60-x6f] value*

           # value reference (e.g. circular trees and graphs)
ref        ::= x51 int            # reference to nth map/list/object

           # UTF-8 encoded character string split into 64k chunks
string     ::= x52 b1 b0 &lt;utf8-data> string  # non-final chunk
           ::= 'S' b1 b0 &lt;utf8-data>         # string of length 
                                             #  0-65535
           ::= [x00-x1f] &lt;utf8-data>         # string of length 
                                             #  0-31
           ::= [x30-x34] &lt;utf8-data>         # string of length 
                                             #  0-1023

           # map/list types for OO languages
type       ::= string                        # type name
           ::= int                           # type reference

           # main production
value      ::= null
           ::= binary
           ::= boolean
           ::= class-def value
           ::= date
           ::= double
           ::= int
           ::= list
           ::= long
           ::= map
           ::= object
           ::= ref
           ::= string
        </artwork>
      </figure>
    </section>

    <section title="Serialization">
      <t>Hessian's object serialization has 8 primitive types:</t>
      <list style="numbers">
        <t>raw <xref target="#binary">binary</xref> data</t>
        <t><xref target="#boolean">boolean</xref></t>
        <t>64-bit millisecond <xref target="#date">date</xref></t>
        <t>64-bit <xref target="#double">double</xref></t>
        <t>32-bit <xref target="#int">int</xref></t>
        <t>64-bit <xref target="#long">long</xref></t>
        <t><xref target="#null">null</xref></t>
        <t>UTF8-encoded <xref target="#string">string</xref></t>
      </list>

      <t>It has 3 recursive types:</t>
      <list style="numbers">
        <t><xref target="#list">list</xref> for lists and arrays</t>
        <t><xref target="#map">map</xref> for maps and dictionaries</t>
        <t><xref target="#object">object</xref> for objects</t>
      </list>

      <t>Finally, it has one special contruct:</t>
      <list style="numbers">
        <t>
          <xref target="#ref">ref</xref> for shared and circular object 
          references.
        </t>
      </list>

      <t>Hessian 2.0 has 3 internal reference maps:</t>
      <list style="numbers">
        <t>An <xref target="#ref-map">object/list reference map</xref>.</t>
        <t>An <xref target="#class-map">class definition reference map</xref>.</t>
        <t>A <xref target="#type-map">type (class name) reference map</xref>.</t>
      </list>

      <section title="binary data" anchor="#binary">
        <figure anchor="binary_grammar">
          <preamble>Binary Grammar</preamble>
          <artwork>
binary ::= x41 b1 b0 &lt;binary-data> binary
       ::= B b1 b0 &lt;binary-data>
       ::= [x20-x2f] &lt;binary-data>
       ::= [x34-x37] b0 &lt;binary-data>
          </artwork>
        </figure>

        <t>
          Binary data is encoded in chunks.  The octet x42 ('B') encodes
          the final chunk and x41 ('A') represents any non-final chunk.
          Each chunk has a 16-bit unsigned length value.
        </t>

        <t>
          len = 256 * b1 + b0
        </t>

        <section title="Compact: short binary">
          <t>
            Binary data with length less than 15 may be encoded by a single
            octet length [x20-x2f].
          </t>

          <t>
            len = code - 0x20
          </t>
        </section>

        <section title="Binary Examples">
          <figure anchor="binary_examples">
            <artwork>
x20               # zero-length binary data

x23 x01 x02 x03   # 3 octet data

B x10 x00 ....    # 4k final chunk of data

A x04 x00 ....    # 1k non-final chunk of data
            </artwork>
          </figure>
        </section>
      </section>

      <section title="boolean" anchor="#boolean">
        <figure anchor="boolean_grammar">
          <preamble>Boolean Grammar</preamble>
          <artwork>
boolean ::= T
        ::= F
          </artwork>
        </figure>

        <t>The octet 'F' represents false and the octet T represents true.</t>

        <section title="Boolean Examples">
          <figure anchor="boolean_examples">
            <artwork>
T   # true
F   # false
            </artwork>
          </figure>
        </section>
      </section>

      <section title="date" anchor="#date">
        <figure anchor="date_grammar">
          <preamble>Date Grammar</preamble>
          <artwork>
date ::= x4a b7 b6 b5 b4 b3 b2 b1 b0
     ::= x4b b4 b3 b2 b1 b0
          </artwork>
        </figure>

        <t>
          Date represented by a 64-bit long of milliseconds since
          Jan 1 1970 00:00H, UTC.
        </t>

        <section title="Compact: date in minutes">
          <t>
            The second form contains a 32-bit int of minutes since
	    Jan 1 1970 00:00H, UTC.
          </t>
        </section>

        <section title="Date Examples">
          <figure anchor="date_examples">
            <artwork>
x4a x00 x00 x00 xd0 x4b x92 x84 xb8   # 09:51:31 May 8, 1998 UTC
            </artwork>
          </figure>
	  
          <figure anchor="date_examples2">
            <artwork>
x4b x4b x92 x0b xa0                 # 09:51:00 May 8, 1998 UTC
            </artwork>
          </figure>
        </section>
      </section>

      <section title="double" anchor="#double">
        <figure anchor="double_grammar">
          <preamble>Double Grammar</preamble>
          <artwork>
double ::= D b7 b6 b5 b4 b3 b2 b1 b0
       ::= x5b
       ::= x5c
       ::= x5d b0
       ::= x5e b1 b0
       ::= x5f b3 b2 b1 b0
          </artwork>
        </figure>

        <t>A 64-bit IEEE floating pointer number.</t>

        <section title="Compact: double zero">
          <t>The double 0.0 can be represented by the octet x5b</t>
        </section>

        <section title="Compact: double one">
          <t>The double 1.0 can be represented by the octet x5c</t>
        </section>

        <section title="Compact: double octet">
          <t>
            Doubles between -128.0 and 127.0 with no fractional component
            can be represented in two octets by casting the byte value to a 
            double.
          </t>

          <t>
            value = (double) b0
          </t>
        </section>

        <section title="Compact: double short">
          <t>
            Doubles between -32768.0 and 32767.0 with no fractional component
            can be represented in three octets by casting the short value to a 
            double.
          </t>

          <t>
            value = (double) (256 * b1 + b0)
          </t>
        </section>

        <section title="Compact: double mills">
          <t>
            Doubles can be represented exactly as a 0.001 precision
          </t>
        </section>

        <section title="Double Examples">
          <figure anchor="double_examples">
            <artwork>
x5b          # 0.0
x5c          # 1.0

x5d x00      # 0.0
x5d x80      # -128.0
x5d x7f      # 127.0

x5e x00 x00  # 0.0
x5e x80 x00  # -32768.0
x5e x7f xff  # 32767.0

D x40 x28 x80 x00 x00 x00 x00 x00  # 12.25
            </artwork>
          </figure>
        </section>
      </section>

      <section title="int" anchor="#int">
        <figure anchor="integer_grammar">
          <preamble>Integer Grammar</preamble>
          <artwork>
int ::= 'I' b3 b2 b1 b0
    ::= [x80-xbf]
    ::= [xc0-xcf] b0
    ::= [xd0-xd7] b1 b0
          </artwork>
        </figure>

        <t>
          A 32-bit signed integer.  An integer is represented by the
          octet x49 ('I') followed by the 4 octets of the integer
          in big-endian order.
        </t>

        <t>
          value = (b3 &lt;&lt; 24) + (b2 &lt;&lt; 16) + (b1 &lt;&lt; 8) + b0;
        </t>

        <section title="Compact: single octet integers">
          <t>
            Integers between -16 and 47 can be encoded by a single octet in the
            range x80 to xbf.
          </t>

          <t>
            value = code - 0x90
          </t>
        </section>

        <section title="Compact: two octet integers">
          <t>
            Integers between -2048 and 2047 can be encoded in two octets with
            the leading byte in the range xc0 to xcf.
          </t>

          <t>
            value = ((code - 0xc8) &lt;&lt; 8) + b0;
          </t>
        </section>

        <section title="Compact: three octet integers">
          <t>
            Integers between -262144 and 262143 can be encoded in three bytes 
            with the leading byte in the range xd0 to xd7.
          </t>

          <t>
            value = ((code - 0xd4) &lt;&lt; 16) + (b1 &lt;&lt; 8) + b0;
          </t>
        </section>

        <section title="Integer Examples">
          <figure anchor="integer_examples">
            <artwork>
x90                # 0
x80                # -16
xbf                # 47

xc8 x00            # 0
xc0 x00            # -2048
xc7 x00            # -256
xcf xff            # 2047

xd4 x00 x00        # 0
xd0 x00 x00        # -262144
xd7 xff xff        # 262143

I x00 x00 x00 x00  # 0
I x00 x00 x01 x2c  # 300
            </artwork>
          </figure>
        </section>
      </section>

      <section title="list" anchor="#list">
        <figure anchor="list_grammar">
          <preamble>List Grammar</preamble>
          <artwork>
list ::= x55 type value* 'Z'   # variable-length list
     ::= 'V' type int value*   # fixed-length list
     ::= x57 value* 'Z'        # variable-length untyped list
     ::= x58 int value*        # fixed-length untyped list
     ::= [x70-77] type value*  # fixed-length typed list
     ::= [x78-7f] value*       # fixed-length untyped list
          </artwork>
        </figure>

        <t>
          An ordered list, like an array.  The two list productions are
	  a fixed-length list and a variable length list.  Both lists have
	  a type. The type string may be an arbitrary UTF-8 string
	  understood by the service.
        </t>

        <t>
          Each list item is added to the reference list to handle shared and 
          circular elements.  See the ref element.
        </t>

        <t>
          Any parser expecting a list must also accept a null or a shared ref.
        </t>

        <t>
          The valid values of type are not specified in this document and 
          may depend on the specific application.  For example, a server 
          implemented in a language with static typing which exposes an Hessian 
          interface can use the type information to instantiate the specific 
          array type.  On the other hand, a server written in a dynamicly-typed 
          language would likely ignore the contents of type entirely and create 
          a generic array.
        </t>

        <section title="Compact: fixed length list">
          <t>
            Hessian 2.0 allows a compact form of the list for successive lists 
            of the same type where the length is known beforehand.  The type 
            and length are encoded by integers, where the type is a reference 
            to an earlier specified type.
          </t>
        </section>

        <section title="List examples">
          <figure anchor="list_example_1">
            <preamble>
              Serialization of a typed int array: int[] = {0, 1}
            </preamble>
            <artwork>
V                    # fixed length, typed list	      
  x04 [int           # encoding of int[] type
  x92                # length = 2
  x90                # integer 0
  x91                # integer 1
            </artwork>
          </figure>

          <figure anchor="list_example_2">
            <preamble>untyped variable-length list = {0, 1}</preamble>
            <artwork>
x57                  # variable-length, untyped 
  x90                # integer 0
  x91                # integer 1
  Z
            </artwork>
          </figure>

          <figure anchor="list_example_3">
            <preamble>fixed-length type</preamble>
            <artwork>
x72                # typed list length=2
  x04 [int         # type for int[] (save as type #0)
  x90              # integer 0
  x91              # integer 1

x73                # typed list length = 3
  x90              # type reference to int[] (integer #0)
  x92              # integer 2
  x93              # integer 3
  x94              # integer 4
            </artwork>
          </figure>
        </section>
      </section>

      <section title="long" anchor="#long">
        <figure anchor="long_grammar">
          <preamble>Long Grammar</preamble>
          <artwork>
long ::= L b7 b6 b5 b4 b3 b2 b1 b0
     ::= [xd8-xef]
     ::= [xf0-xff] b0
     ::= [x38-x3f] b1 b0
     ::= x4c b3 b2 b1 b0
          </artwork>
        </figure>

        <t>
          A 64-bit signed integer.  An long is represented by the
          octet x4c ('L' )
          followed by the 8-bytes of the integer in big-endian order.
        </t>

        <section title="Compact: single octet longs">
          <t>
            Longs between -8 and 15 are represented by a single octet in the
            range xd8 to xef.
          </t>

          <t>
             value = (code - 0xe0)
          </t>
        </section>

        <section title="Compact: two octet longs">
          <t>
            Longs between -2048 and 2047 are encoded in two octets with
            the leading byte in the range xf0 to xff.
          </t>

          <t>
             value = ((code - 0xf8) &lt;&lt; 8) + b0
          </t>
        </section>

        <section title="Compact: three octet longs">
          <t>
            Longs between -262144 and 262143 are encoded in three octets with
            the leading byte in the range x38 to x3f.
          </t>

          <t>
             value = ((code - 0x3c) &lt;&lt; 16) + (b1 &lt;&lt; 8) + b0
          </t>
        </section>

        <section title="Compact: four octet longs">
          <t>
            Longs between which fit into 32-bits are encoded in five octets with
            the leading byte x4c.
          </t>

          <t>
             value = (b3 &lt;&lt; 24) + (b2 &lt;&lt; 16) + (b1 &lt;&lt; 8) + b0
          </t>
        </section>

        <section title="Long Examples">
          <figure anchor="long_examples">
            <artwork>
xe0                  # 0
xd8                  # -8
xef                  # 15

xf8 x00              # 0
xf0 x00              # -2048
xf7 x00              # -256
xff xff              # 2047

x3c x00 x00          # 0
x38 x00 x00          # -262144
x3f xff xff          # 262143

x4c x00 x00 x00 x00  # 0
x4c x00 x00 x01 x2c  # 300

L x00 x00 x00 x00 x00 x00 x01 x2c  # 300
            </artwork>
          </figure>
        </section>
      </section>

      <section title="map" anchor="#map">
        <figure anchor="map_grammar">
          <preamble>Map Grammar</preamble>
          <artwork>
map        ::= M type (value value)* Z
          </artwork>
        </figure>

        <t>
          Represents serialized maps and can represent objects.
          The type element describes the type of the map.
        </t>

        <t>
          The type may be empty, i.e. a zero length.  The parser is responsible 
          for choosing a type if one is not specified.  For objects, 
          unrecognized keys will be ignored.
        </t>

        <t>
          Each map is added to the reference list.  Any time the parser expects 
          a map, it must also be able to support a null or a ref.
        </t>

        <t>The type is chosen by the service.</t>

        <section title="Map examples">
          <figure anchor="map_example_1">
            <preamble>A sparse array</preamble>
            <artwork>
map = new HashMap();
map.put(new Integer(1), "fee");
map.put(new Integer(16), "fie");
map.put(new Integer(256), "foe");

---

H           # untyped map (HashMap for Java)
  x91       # 1
  x03 fee   # "fee"

  xa0       # 16
  x03 fie   # "fie"

  xc9 x00   # 256
  x03 foe   # "foe"

  Z
            </artwork>
          </figure>

          <figure anchor="map_example_2">
            <preamble>Map Representation of a Java Object</preamble>
            <artwork>
public class Car implements Serializable {
  String color = "aquamarine";
  String model = "Beetle";
  int mileage = 65536;
}

---
M
  x13 com.caucho.test.Car  # type

  x05 color                # color field
  x0a aquamarine

  x05 model                # model field
  x06 Beetle

  x07 mileage              # mileage field
  I x00 x01 x00 x00
  Z
            </artwork>
          </figure>
      </section>
      </section>

      <section title="null" anchor="#null">
        <figure anchor="null_grammar">
          <preamble>Null Grammar</preamble>
          <artwork>
null ::= N
          </artwork>
        </figure>

        <t>Null represents a null pointer.</t>

        <t>The octet 'N' represents the null value.</t>
      </section>

      <section title="object" anchor="#object">
        <figure anchor="object_grammar">
          <preamble>Object Grammar</preamble>
          <artwork>
class-def  ::= 'C' string int string*

object     ::= 'O' int value*
           ::= [x60-x6f] value*
          </artwork>
        </figure>

        <section title="Compact: class definition">
          <t>
            Hessian 2.0 has a compact object form where the field names
            are only serialized once.  Following objects only need to serialize
            their values.
          </t>

          <t>
            The object definition includes a mandatory type string, the number 
            of fields, and the field names.  The object definition is stored in 
            the object definition map and will be referenced by object 
            instances with an integer reference.
          </t>
        </section>

        <section title="Compact: object instantiation">
          <t>
            Hessian 2.0 has a compact object form where the field names
            are only serialized once.  Following objects only need to serialize
            their values.
          </t>

          <t>
            The object instantiation creates a new object based on a previous
            definition.  The integer value refers to the object definition.
          </t>
        </section>

        <section title="Object examples">

          <figure anchor="object_example_1">
            <preamble>Object serialization</preamble>
            <artwork>
class Car {
  String color;
  String model;
}

out.writeObject(new Car("red", "corvette"));
out.writeObject(new Car("green", "civic"));

---

C                        # object definition (#0)
  x0b example.Car        # type is example.Car
  x92                    # two fields
  x05 color              # color field name
  x05 model              # model field name

O                        # object def (long form)
  x90                    # object definition #0
  x03 red                # color field value
  x08 corvette           # model field value

x60                      # object def #0 (short form)
  x05 green              # color field value
  x05 civic              # model field value
            </artwork>
          </figure>

          <figure anchor="object_example_2">
            <preamble></preamble>
            <artwork>
enum Color {
  RED,
  GREEN,
  BLUE,
}

out.writeObject(Color.RED);
out.writeObject(Color.GREEN);
out.writeObject(Color.BLUE);
out.writeObject(Color.GREEN);

---

C                         # class definition #0
  x0b example.Color       # type is example.Color
  x91                     # one field
  x04 name                # enumeration field is "name"

x60                       # object #0 (class def #0)
  x03 RED                 # RED value

x60                       # object #1 (class def #0)
  x90                     # object definition ref #0
  x05 GREEN               # GREEN value

x60                       # object #2 (class def #0)
  x04 BLUE                # BLUE value

x51 x91                   # object ref #1, i.e. Color.GREEN
            </artwork>
          </figure>
        </section>
      </section>

      <section title="ref" anchor="#ref">
        <figure anchor="ref_grammar">
          <preamble>Ref Grammar</preamble>
          <artwork>
ref ::= x51 int
          </artwork>
        </figure>

        <t>
          An integer referring to a previous list, map, or object instance.
          As each list, map or object is read from the input stream,
          it is assigned the integer position in the stream, i.e. the first
          list or map is '0', the next 
          is '1', etc.  A later ref can then use the previous object.  Writers 
          MAY generate refs.  Parsers MUST be able to 
          recognize them.
        </t>

        <t>
          ref can refer to incompletely-read items.  For example, a circular 
          linked-list will refer to the first link before the entire list has 
          been read.
        </t>

        <t>
          A possible implementation would add each map, list, and object
          to an array as it is read.  The ref will return the corresponding
          value from the array.  To support circular structures, the
          implementation would store the map, list or object immediately,
          before filling in the contents.
        </t>

        <t>
          Each map or list is stored into an array as it is
          parsed.  ref selects one of the stored objects.  The first
          object is numbered '0'.
        </t>

        <section title="Ref Examples">
          <figure anchor="ref_examples">
            <preamble>Circular list</preamble>
            <artwork>
list = new LinkedList();
list.data = 1;
list.tail = list;

---
C
  x0a LinkedList
  x92
  x04 head
  x04 tail

o x90      # object stores ref #0
  x91      # data = 1
  x51 x90  # next field refers to itself, i.e. ref #0
            </artwork>
          </figure>
        </section>

        <t>
          ref only refers to list, map and objects elements.
          Strings and binary data, in particular, will only share references
          if they're wrapped in a list or map.
        </t>
      </section>

      <section title="string" anchor="#string">
        <figure anchor="string_grammar">
          <preamble>String Grammar</preamble>
          <artwork>
string ::= x52 b1 b0 &lt;utf8-data> string
       ::= S b1 b0 &lt;utf8-data>
       ::= [x00-x1f] &lt;utf8-data>
       ::= [x30-x33] b0 &lt;utf8-data>
          </artwork>
        </figure>

        <t> 
          A 16-bit unicode character string encoded in UTF-8.  Strings are 
          encoded in chunks. x53 ('S') represents the final chunk
          and x52 ('R') represents any non-final chunk.  Each chunk
          has a 16-bit unsigned integer length value.
        </t>

        <t>
          The length is the number of 16-bit characters, which may be
	  different than the number of bytes.
        </t>

        <t>String chunks may not split surrogate pairs.</t>

        <section title="Compact: short strings">
          <t>
            Strings with length less than 32 may be encoded with a single
            octet length [x00-x1f].
          </t>

          <t>
            value = code
          </t>
        </section>

        <section title="String Examples">
          <figure anchor="string_examples">
            <artwork>
x00                 # "", empty string
x05 hello           # "hello"
x01 xc3 x83         # "\u00c3"

S x00 x05 hello     # "hello" in long form

x52 x00 x07 hello,  # "hello, world" split into two chunks
  x05 world
            </artwork>
          </figure>
        </section>
      </section>

      <section title="type" anchor="#type">
        <figure anchor="type_grammar">
          <preamble>Type Grammar</preamble>
          <artwork>
type ::= string
     ::= int
          </artwork>
        </figure>

        <t>A <xref target="#map">map</xref> or <xref target="#list">list</xref>
        includes a type attribute indicating the type name of the
        map or list for object-oriented languages.</t>

        <t>Each type is added to the <xref target="#type-map">type map</xref>
        for future reference.</t>
      </section>

        <section title="Compact: type references">
          <t>
            Repeated type strings MAY use the
            <xref target="#type-map">type map</xref> to refer to a previously
            used type.  The type reference is zero-based over all the
            types encountered during parsing.
          </t>
        </section>
    </section>

    <section title="Reference Maps">
      <t>Hessian 2.0 has 3 internal reference maps:</t>
      <list style="numbers">
        <t>An map/object/list reference map.</t>
        <t>An class definition map.</t>
        <t>A type (class name) map.</t>
      </list>

      <t>The value reference map lets Hessian support arbitrary
      graphs, and recursive and circular data structures.</t>

      <t>The class and type maps improve Hessian efficiency by
      avoiding repetition of common string data.</t>

      <section title="value reference" anchor="#ref-map">
        <t>Hessian supports arbitrary graphs by
        adding <xref target="#list">list</xref>,
        <xref target="#object">object</xref>, and 
        <xref target="#map">map</xref> as it encounters them in
        the bytecode stream.</t>

        <t>Parsers MUST store each list, object and map in the reference
        map as they are encountered.</t>

        <t>The stored objects can be used with a <xref target="#ref">ref</xref>
        bytecode.</t>
      </section>

      <section title="class reference" anchor="#class-map">
        <t>Each <xref target="#object">object definition</xref> is
        automatically added to the class-map.  Parsers MUST add a
        class definition to the class map as each is encountered.
        Following object instances will refer to the defined class.</t>
      </section>

      <section title="type reference" anchor="#type-map">
        <t>The <xref target="#type">type</xref> strings for
        <xref target="#map">map</xref> and <xref target="#list">list</xref>
        values are stored in a type map for reference.</t>

        <t>Parsers MUST add a type string to the type map as
        each is encountered.</t>
    </section>
    </section>

    <section title="Bytecode map">

      <t>
        Hessian is organized as a bytecode protocol.  A Hessian reader 
        is essentially a switch statement on the initial octet.
      </t>

      <figure anchor="bytecode_encoding">
        <preamble>Bytecode Encoding</preamble>
        <artwork>
x00 - x1f    # utf-8 string length 0-32
x20 - x2f    # binary data length 0-16
x30 - x33    # utf-8 string length 0-1023
x34 - x37    # binary data length 0-1023
x38 - x3f    # three-octet compact long (-x40000 to x3ffff)
x40          # reserved (expansion/escape)
x41          # 8-bit binary data non-final chunk ('A')
x42          # 8-bit binary data final chunk ('B')
x43          # object type definition ('C')
x44          # 64-bit IEEE encoded double ('D')
x45          # reserved
x46          # boolean false ('F')
x47          # reserved
x48          # untyped map ('H')
x49          # 32-bit signed integer ('I')
x4a          # 64-bit UTC millisecond date
x4b          # 32-bit UTC minute date
x4c          # 64-bit signed long integer ('L')
x4d          # map with type ('M')
x4e          # null ('N')
x4f          # object instance ('O')
x50          # reserved
x51          # reference to map/list/object - integer ('Q')
x52          # utf-8 string non-final chunk ('R')
x53          # utf-8 string final chunk ('S')
x54          # boolean true ('T')
x55          # variable-length list/vector ('U')
x56          # fixed-length list/vector ('V')
x57          # variable-length untyped list/vector ('W')
x58          # fixed-length untyped list/vector ('X')
x59          # long encoded as 32-bit int ('Y')
x5a          # list/map terminator ('Z')
x5b          # double 0.0
x5c          # double 1.0
x5d          # double represented as byte (-128.0 to 127.0)
x5e          # double represented as short (-32768.0 to 327676.0)
x5f          # double represented as mills 
x60 - x6f    # object with direct type
x70 - x77    # fixed list with direct length
x78 - x7f    # fixed untyped list with direct length
x80 - xbf    # one-octet compact int (-x10 to x3f, x90 is 0)
xc0 - xcf    # two-octet compact int (-x800 to x7ff)
xd0 - xd7    # three-octet compact int (-x40000 to x3ffff)
xd8 - xef    # one-octet compact long (-x8 to xf, xe0 is 0)
xf0 - xff    # two-octet compact long (-x800 to x7ff, xf8 is 0)
        </artwork>
      </figure>

    </section>
  </middle>

  <back>
  </back>
 
</rfc>
